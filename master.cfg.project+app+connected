# -*- python -*-
# ex: set syntax=python:

# This is the master configuration file for the django-simple example:
# https://github.com/danirus/buildbot-sample-conf/tree/master/django-simple

# It must be installed as 'master.cfg' in your buildmaster's base directory.

from buildbot.process.properties import Property

# 'repos' is a python dictionary with repository data. Each key at the top 
# refers to each of the software bundles to build under this configuration. 
# Each inner dictionary contains the URL to the repository and the branch 
# from which to get the changes.

repos = {
    'webproject': {
#        'url': 'ssh://buildbot@server/home/git/django-sample-project.git',
        'url': '/home/git/django-sample-project.git',
        'branch': 'master'
    },
    'webapp': {
        'url': 'https://github.com/<yourGitHubUser>/django-sample-app.git',
#        'url': '/home/git/django-sample-app.git',
        'branch': 'master'
    },
}

# This is the dictionary that the buildmaster pays attention to.
c = BuildmasterConfig = {}


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave("py27dj14", "pass"),
    BuildSlave("py27dj15", "pass"),
    BuildSlave("py32dj15", "pass"),
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = [
    PBChangeSource(),
]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
# In this case there are 5 schedulers and 2 filters:
#  * A scheduler and a filter for the web project
#  * A scheduler and a filter for the web app
#  * 3 special schedulers that will trigger each web project builder

from buildbot.changes import filter
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable

webproject_chfilter = filter.ChangeFilter(repository=repos['webproject']['url'],
                                         branch=repos['webproject']['branch'])

webproject_sch = SingleBranchScheduler(
    name='webproject-sch',
    change_filter=webproject_chfilter,
    builderNames=['webproject-py27dj14', 
                  'webproject-py27dj15', 
                  'webproject-py32dj15'],
    treeStableTimer=None)

webproject_py27dj14_tsch = Triggerable(name='webproject-py27dj14-tsch', 
                                       builderNames=['webproject-py27dj14'])
webproject_py27dj15_tsch = Triggerable(name='webproject-py27dj15-tsch', 
                                       builderNames=['webproject-py27dj15'])
webproject_py32dj15_tsch = Triggerable(name='webproject-py32dj15-tsch', 
                                       builderNames=['webproject-py32dj15'])

webapp_chfilter = filter.ChangeFilter(repository=repos['webapp']['url'],
                                      branch=repos['webapp']['branch'])

webapp_sch = SingleBranchScheduler(
    name='webapp-sch',
    change_filter=webapp_chfilter,
    builderNames=['webapp-py27dj14', 
                  'webapp-py27dj15', 
                  'webapp-py32dj15'],
    treeStableTimer=None)

c['schedulers'] = [webproject_sch, 
                   webproject_py27dj14_tsch, 
                   webproject_py27dj15_tsch, 
                   webproject_py32dj15_tsch,
                   webapp_sch]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform 
# a build. What steps, and which slaves can execute them.  Note that any 
# particular build will only take place on one slave.

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source.git import Git
from buildbot.steps.trigger import Trigger

webproject_steps = [
    Git(name='fetch', mode='full', repourl=repos['webproject']['url'],
        haltOnFailure=True),
    ShellCommand(name='requirements', 
                 description='installing requirements',
                 descriptionDone='installed',
                 command=['pip', 'install', '-r', 'requirements.pip'],
                 haltOnFailure=True),
    ShellCommand(name='tests', 
                 description='testing',
                 descriptionDone='tested',
                 command=['coverage', 
                          'run',
                          'manage.py', 
                          'test', 
                          'polls',
                          '--settings=mysite.test_settings'],
                 haltOnFailure=True),
    ShellCommand(name='coverage',
                 description='creating coverage report',
                 descriptionDone='coverage report created',
                 command=['coverage',
                          'report',
                          '--include=polls/*',
                          '--omit=polls/tests/*'],
                 haltOnFailure=True),
]
webproject_factory = BuildFactory(webproject_steps)

webapp_steps = [
    Git(name='fetch', mode='full', #repourl=Property('repository'),
        repourl=repos['webapp']['url'],
        haltOnFailure=True),
    ShellCommand(name='requirements',
                 description='installing requirements',
                 descriptionDone='requirements installed',
                 command=['pip', 'install', '-r', 'requirements_tests.pip'],
                 haltOnFailure=True),
    ShellCommand(name='tests',
                 description='testing',
                 descriptionDone='tested',
                 command=['coverage', 'run', 'setup.py', 'test'],
                 haltOnFailure=True),
    ShellCommand(name='coverage',
                 description='creating coverage report',
                 descriptionDone='coverage report created',
                 command=['coverage',
                          'report',
                          '--include=sample_app/*',
                          '--omit=sample_app/tests/*'],
                 haltOnFailure=True)
]

trigger_webproject_py27dj14_step = Trigger(
    schedulerNames=['webproject-py27dj14-tsch'], 
    waitForFinish=True, alwaysUseLatest=True)
trigger_webproject_py27dj15_step = Trigger(
    schedulerNames=['webproject-py27dj15-tsch'], 
    waitForFinish=True, alwaysUseLatest=True)
trigger_webproject_py32dj15_step = Trigger(
    schedulerNames=['webproject-py32dj15-tsch'], 
    waitForFinish=True, alwaysUseLatest=True)

webapp_py27dj14_steps = webapp_steps + [trigger_webproject_py27dj14_step]
webapp_py27dj15_steps = webapp_steps + [trigger_webproject_py27dj15_step]
webapp_py32dj15_steps = webapp_steps + [trigger_webproject_py32dj15_step]

webapp_py27dj14_factory = BuildFactory(webapp_py27dj14_steps)
webapp_py27dj15_factory = BuildFactory(webapp_py27dj15_steps)
webapp_py32dj15_factory = BuildFactory(webapp_py32dj15_steps)

c['builders'] = [
    # django-sample-project
    BuilderConfig(name='webproject-py27dj14', 
                  slavename='py27dj14', 
                  factory=webproject_factory),
    BuilderConfig(name='webproject-py27dj15', 
                  slavename='py27dj15', 
                  factory=webproject_factory),
    BuilderConfig(name='webproject-py32dj15', 
                  slavename='py32dj15', 
                  factory=webproject_factory),

    # django-sample-app
    BuilderConfig(name='webapp-py27dj14', 
                  slavename='py27dj14', 
                  factory=webapp_py27dj14_factory),
    BuilderConfig(name='webapp-py27dj15', 
                  slavename='py27dj15', 
                  factory=webapp_py27dj15_factory),
    BuilderConfig(name='webapp-py32dj15', 
                  slavename='py32dj15', 
                  factory=webapp_py32dj15_factory),
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz( 
   # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)

# Mail Notifier
from buildbot.status.mail import MailNotifier

smtp_kwargs = {
    'relayhost': 'smtp.gmail.com', 
    'smtpPort': 587, 
    'useTls': True,
    'smtpUser': 'user@gmail.com', 
    'smtpPassword': '**************'
}

c['status'] = [
    # web interface with github notification entry point active 
    html.WebStatus(http_port=8010, authz=authz_cfg,
                   change_hook_dialects={'github': True}),

    # send email to developers whose changes were included in the build
    # MailNotifier(fromaddr='buildbot@example.com', lookup='example.com',
    #              extraRecipients=['admin@example.com'],
    #              **smtp_kwargs),
]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Buildbot-CI of Webapps"
c['titleURL'] = "https://github.com/danirus/buildbot-sample-conf"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

