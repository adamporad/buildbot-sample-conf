# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

from buildbot.process.properties import Property

repos = {
    'myproject': {
        'url': 'file:///home/git/myproject.git',
        'branch': 'master', 'rev': None 
    },
    'myapp': {
        'url': 'file:///home/git/myapp.git',
        'branch': 'master', 'rev': None 
    },
}

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    BuildSlave("django13", "pass"),
    BuildSlave("django14", "pass"),
    BuildSlave("django15", "pass"),
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = [
    PBChangeSource(),
]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.changes import filter
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable

myproject_chfilter = filter.ChangeFilter(repository=repos['myproject']['url'],
                                         branch=repos['myproject']['branch'])

myproject_sch = SingleBranchScheduler(
    name='myproject-sch',
    change_filter=myproject_chfilter,
    builderNames=['myproject-dj13', 'myproject-dj14', 'myproject-dj15'],
    treeStableTimer=None)

myproject_dj13_tsch = Triggerable(name='myproject-dj13-tsch', 
                                  builderNames=['myproject-dj13'])
myproject_dj14_tsch = Triggerable(name='myproject-dj14-tsch', 
                                  builderNames=['myproject-dj14'])
myproject_dj15_tsch = Triggerable(name='myproject-dj15-tsch', 
                                  builderNames=['myproject-dj15'])

myapp_chfilter = filter.ChangeFilter(repository=repos['myapp']['url'],
                                     branch=repos['myapp']['branch'])

myapp_sch = SingleBranchScheduler(
    name='myapp-sch',
    change_filter=myapp_chfilter,
    builderNames=['myapp-dj13', 'myapp-dj14', 'myapp-dj15'],
    treeStableTimer=None)

c['schedulers'] = [myproject_sch, 
                   myproject_dj13_tsch, 
                   myproject_dj14_tsch, 
                   myproject_dj15_tsch,
                   myapp_sch]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform 
# a build. What steps, and which slaves can execute them.  Note that any 
# particular build will only take place on one slave.

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.source.git import Git
from buildbot.steps.trigger import Trigger

myproject_steps = [
    Git(name='fetch', mode='full', repourl=repos['myproject']['url'],
        haltOnFailure=True),
    ShellCommand(name='requirements', 
                 description='installing requirements',
                 descriptionDone='installed',
                 command=['pip', 'install', '-r', 'requirements.pip'],
                 haltOnFailure=True),
    ShellCommand(name='coverage', 
                 description='running coverage',
                 descriptionDone='coverage',
                 command=['python', 
                          'manage.py', 
                          'test_coverage', 
                          'polls',
                          '--settings=mysite.test_settings'],
                 haltOnFailure=True),
    ShellCommand(name='tests',
                 description='testing',
                 descriptionDone='tested',
                 command=['python',
                          'manage.py',
                          'test',
                          'polls',
                          '--settings=mysite.test_settings'],
                 haltOnFailure=True),
]
myproject_factory = BuildFactory(myproject_steps)

app_steps = [
    Git(name='fetch', mode='full', repourl=Property('repository'),
        haltOnFailure=True),
    ShellCommand(name='requirements',
                 description='installing requirements',
                 descriptionDone='installed',
                 command=['pip', 'install', '-r', 'requirements'],
                 haltOnFailure=True),
    ShellCommand(name='tests',
                 description='testing',
                 descriptionDone='tested',
                 command=['python', 'setup.py', 'test'],
                 haltOnFailure=True),
]

trigger_myproject_dj13_step = Trigger(
    schedulerNames=['myproject-dj13-tsch'], 
    waitForFinish=True, alwaysUseLatest=True)
trigger_myproject_dj14_step = Trigger(
    schedulerNames=['myproject-dj14-tsch'], 
    waitForFinish=True, alwaysUseLatest=True)
trigger_myproject_dj15_step = Trigger(
    schedulerNames=['myproject-dj15-tsch'], 
    waitForFinish=True, alwaysUseLatest=True)

app_dj13_steps = app_steps + [trigger_myproject_dj13_step]
app_dj14_steps = app_steps + [trigger_myproject_dj14_step]
app_dj15_steps = app_steps + [trigger_myproject_dj15_step]

app_dj13_factory = BuildFactory(app_dj13_steps)
app_dj14_factory = BuildFactory(app_dj14_steps)
app_dj15_factory = BuildFactory(app_dj15_steps)

c['builders'] = [
    # django-mysite-sample
    BuilderConfig(name='myproject-dj13', 
                  slavename='django13', 
                  factory=myproject_factory),
    BuilderConfig(name='myproject-dj14', 
                  slavename='django14', 
                  factory=myproject_factory),
    BuilderConfig(name='myproject-dj15', 
                  slavename='django15', 
                  factory=myproject_factory),

    # django-inline-media
    BuilderConfig(name='myapp-dj13', 
                  slavename='django13', 
                  factory=app_dj13_factory),
    BuilderConfig(name='myapp-dj14', 
                  slavename='django14', 
                  factory=app_dj14_factory),
    BuilderConfig(name='myapp-dj15', 
                  slavename='django15', 
                  factory=app_dj15_factory),
]

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)

# Mail Notifier
from buildbot.status.mail import MailNotifier

smtp_kwargs = {
    'relayhost': 'smtp.gmail.com', 
    'smtpPort': 587, 
    'useTls': True,
    'smtpUser': 'user@gmail.com', 
    'smtpPassword': '**************'
}

c['status'] = [
    # web interface with github notification entry point active 
    html.WebStatus(http_port=8011, authz=authz_cfg,
                   change_hook_dialects={'github': True}),

    # send email to developers whose changes were included in the build
    # MailNotifier(fromaddr='buildbot@example.com', lookup='example.com',
    #              extraRecipients=['admin@example.com'],
    #              **smtp_kwargs),
]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Daniel Rus Morales"
c['titleURL'] = "http://danir.us"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8011/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

